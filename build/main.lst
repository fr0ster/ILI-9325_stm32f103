ARM GAS  /tmp/ccNgZlK5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	Error_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	Error_Handler:
  25              	.LFB70:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  21:Src/main.c    **** #include "main.h"
  22:Src/main.c    **** #include "usart.h"
  23:Src/main.c    **** #include "gpio.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** 	#include "lcd.h"
  29:Src/main.c    **** 	#include <string.h>
  30:Src/main.c    **** 	#include "stm32f1xx_hal_flash.h"
  31:Src/main.c    **** 	#include "flash_stm32f103_hal_sm.h"
  32:Src/main.c    **** 
ARM GAS  /tmp/ccNgZlK5.s 			page 2


  33:Src/main.c    **** 			// 		GPIO to data bus
  34:Src/main.c    **** 			// D0 -> PA9
  35:Src/main.c    **** 			// D1 -> PA7		//	PC7 BAZHEN CHANGE TO PA7	#define NEW_BIT1
  36:Src/main.c    **** 			// D2 -> PA10
  37:Src/main.c    **** 			// D3 -> PB3
  38:Src/main.c    **** 			// D4 -> PB5
  39:Src/main.c    **** 			// D5 -> PB4
  40:Src/main.c    **** 			// D6 -> PB10
  41:Src/main.c    **** 			// D7 -> PA8
  42:Src/main.c    **** 
  43:Src/main.c    **** 			// 		GPIO to control bus
  44:Src/main.c    **** 			// RST	->	PB1  	// PC1 BAZHEN CHANGE TO PB1	#define NEW_RST
  45:Src/main.c    **** 			// CS	->	PB0		on board RED-LED
  46:Src/main.c    **** 			// RS	->	PA4		(CD)
  47:Src/main.c    **** 			// WR	->	PA1
  48:Src/main.c    **** 			// RD	->	PA0
  49:Src/main.c    **** 
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END Includes */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  54:Src/main.c    **** /* USER CODE BEGIN PTD */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PTD */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  59:Src/main.c    **** /* USER CODE BEGIN PD */
  60:Src/main.c    **** /* USER CODE END PD */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN PM */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PM */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****   * @brief  The application entry point.
  88:Src/main.c    ****   * @retval int
  89:Src/main.c    ****   */
ARM GAS  /tmp/ccNgZlK5.s 			page 3


  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  92:Src/main.c    ****   /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****   HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Configure the system clock */
 106:Src/main.c    ****   SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Initialize all configured peripherals */
 113:Src/main.c    ****   MX_GPIO_Init();
 114:Src/main.c    ****   MX_USART2_UART_Init();
 115:Src/main.c    ****   /* USER CODE BEGIN 2 */
 116:Src/main.c    **** 
 117:Src/main.c    ****   uint32_t pointer_u32 = 0;
 118:Src/main.c    **** 
 119:Src/main.c    **** 	#define	DEBUG_STRING_SIZE		300
 120:Src/main.c    **** //	char DebugString[DEBUG_STRING_SIZE];
 121:Src/main.c    **** //
 122:Src/main.c    **** //	sprintf(DebugString,"VRGC-056th \r\n for_debug USART2 on PA2 115200/8-N-1\r\n");
 123:Src/main.c    **** //	HAL_UART_Transmit(DebugH.uart, (uint8_t *)DebugString, strlen(DebugString), 100);
 124:Src/main.c    **** 
 125:Src/main.c    **** 	LCD_Init();
 126:Src/main.c    **** 	LCD_SetRotation(1);
 127:Src/main.c    **** 	LCD_FillScreen(ILI92_WHITE);
 128:Src/main.c    **** 	LCD_SetTextColor(ILI92_GREEN, ILI92_WHITE);
 129:Src/main.c    **** 	LCD_Printf("\n START 'VRGC-056th'\n ");
 130:Src/main.c    **** 	LCD_Printf("for_debug USART2 on PA2 115200/8-N-1 \n");
 131:Src/main.c    **** 
 132:Src/main.c    **** 	LCD_Printf("Flash read.. \n");
 133:Src/main.c    **** 	uint32_t flash_word_u32 = Flash_Read(MY_FLASH_PAGE_ADDR);
 134:Src/main.c    **** 	LCD_Printf(" word_u32 = 0x%x; \n", flash_word_u32);
 135:Src/main.c    **** 	LCD_Printf(" Rotation: '%s'; \n ", (char *)&flash_word_u32);
 136:Src/main.c    **** 
 137:Src/main.c    **** 	#define STRING_LEFT  ( (uint32_t) 0x7466654C )
 138:Src/main.c    **** 	#define STRING_RIGHT ( (uint32_t) 0x74676952 )
 139:Src/main.c    **** 
 140:Src/main.c    **** 		#define WRITE_TO_FLASH	0
 141:Src/main.c    **** 		#if WRITE_TO_FLASH == 1
 142:Src/main.c    **** 			flash_word_u32 = STRING_RIGHT;
 143:Src/main.c    **** 			if (flash_word_u32 == STRING_RIGHT)
 144:Src/main.c    **** 			{
 145:Src/main.c    **** 				LCD_Printf("FLASH_Unlock\n ");
 146:Src/main.c    **** 				HAL_FLASH_Unlock();
ARM GAS  /tmp/ccNgZlK5.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    **** 				LCD_Printf("FLASH Erase Page\n ");
 149:Src/main.c    **** 				Flash_Erase_Page(MY_FLASH_PAGE_ADDR);
 150:Src/main.c    **** 
 151:Src/main.c    **** 				//uint32_t flash_string_u32 = STRING_LEFT;
 152:Src/main.c    **** 				uint32_t flash_string_u32 = STRING_RIGHT;
 153:Src/main.c    **** 				LCD_Printf("Write to flash: %s\n ",(char *)&flash_string_u32);
 154:Src/main.c    **** 				Flash_Write( MY_FLASH_PAGE_ADDR, flash_string_u32);
 155:Src/main.c    **** 
 156:Src/main.c    **** 				HAL_FLASH_Lock();
 157:Src/main.c    **** 				LCD_Printf("HAL FLASH Lock\n ");
 158:Src/main.c    **** 			}
 159:Src/main.c    **** 			else
 160:Src/main.c    **** 			{
 161:Src/main.c    **** 				LCD_Printf("NO write to FLASH.\n ");
 162:Src/main.c    **** 			}
 163:Src/main.c    **** 		#endif
 164:Src/main.c    **** 
 165:Src/main.c    **** 	switch (flash_word_u32)
 166:Src/main.c    **** 	{
 167:Src/main.c    **** 		 case 	STRING_LEFT:	LCD_SetRotation(3);		break;
 168:Src/main.c    **** 		 case 	STRING_RIGHT:	LCD_SetRotation(1);		break;
 169:Src/main.c    **** 		 default:				LCD_SetRotation(1);		break;
 170:Src/main.c    **** 	}
 171:Src/main.c    **** 
 172:Src/main.c    ****   /* USER CODE END 2 */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* Infinite loop */
 175:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 176:Src/main.c    ****   while (1) {
 177:Src/main.c    **** 	for (int i=0; i<8; i++)	{
 178:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 179:Src/main.c    **** 		char DebugStr[DEBUG_STRING_SIZE];
 180:Src/main.c    **** 		sprintf(DebugStr," pointer %04u\r\n", (int)pointer_u32++);
 181:Src/main.c    **** 		HAL_UART_Transmit(&huart2, (uint8_t *)DebugStr, strlen(DebugStr), 100);
 182:Src/main.c    **** 		LCD_SetCursor(100, 100);
 183:Src/main.c    **** 		LCD_Printf("%d) ",i);
 184:Src/main.c    **** 		switch(i) {
 185:Src/main.c    **** 			case  7: LCD_Printf("Sunday____;"); 	break;
 186:Src/main.c    **** 			case  1: LCD_Printf("Monday____;");		break;
 187:Src/main.c    **** 			case  2: LCD_Printf("Tuesday___;"); 	break;
 188:Src/main.c    **** 			case  3: LCD_Printf("Wednesday_;");		break;
 189:Src/main.c    **** 			case  4: LCD_Printf("Thursday__;");		break;
 190:Src/main.c    **** 			case  5: LCD_Printf("Friday____;");		break;
 191:Src/main.c    **** 			case  6: LCD_Printf("Saturday__;");		break;
 192:Src/main.c    **** 			default: LCD_Printf("Out_of_day;");		break;
 193:Src/main.c    **** 		} // end switch
 194:Src/main.c    **** 		HAL_Delay(1000);
 195:Src/main.c    **** 	} // end for i=0
 196:Src/main.c    ****     /* USER CODE END WHILE */
 197:Src/main.c    **** 
 198:Src/main.c    ****     /* USER CODE BEGIN 3 */
 199:Src/main.c    ****   }
 200:Src/main.c    ****   /* USER CODE END 3 */
 201:Src/main.c    **** }
 202:Src/main.c    **** 
 203:Src/main.c    **** /**
ARM GAS  /tmp/ccNgZlK5.s 			page 5


 204:Src/main.c    ****   * @brief System Clock Configuration
 205:Src/main.c    ****   * @retval None
 206:Src/main.c    ****   */
 207:Src/main.c    **** void SystemClock_Config(void)
 208:Src/main.c    **** {
 209:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 210:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 211:Src/main.c    **** 
 212:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 213:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 214:Src/main.c    ****   */
 215:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 216:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 217:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 218:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 222:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 223:Src/main.c    ****   {
 224:Src/main.c    ****     Error_Handler();
 225:Src/main.c    ****   }
 226:Src/main.c    **** 
 227:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 228:Src/main.c    ****   */
 229:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 230:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 231:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 232:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 233:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 234:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 235:Src/main.c    **** 
 236:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    **** }
 241:Src/main.c    **** 
 242:Src/main.c    **** /* USER CODE BEGIN 4 */
 243:Src/main.c    **** 
 244:Src/main.c    **** /* USER CODE END 4 */
 245:Src/main.c    **** 
 246:Src/main.c    **** /**
 247:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 248:Src/main.c    ****   * @retval None
 249:Src/main.c    ****   */
 250:Src/main.c    **** void Error_Handler(void)
 251:Src/main.c    **** {
  27              		.loc 1 251 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
 252:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 253:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/ccNgZlK5.s 			page 6


 254:Src/main.c    ****   while(1)
  34              		.loc 1 254 3 discriminator 1 view .LVU1
 255:Src/main.c    ****   {
 256:Src/main.c    ****   }
  35              		.loc 1 256 3 discriminator 1 view .LVU2
  36 0000 FEE7     		b	.L2
  37              		.cfi_endproc
  38              	.LFE70:
  40              		.section	.text.SystemClock_Config,"ax",%progbits
  41              		.align	1
  42              		.global	SystemClock_Config
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu softvfp
  48              	SystemClock_Config:
  49              	.LFB69:
 208:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  50              		.loc 1 208 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 64
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 00B5     		push	{lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 14, -4
  58 0002 91B0     		sub	sp, sp, #68
  59              	.LCFI1:
  60              		.cfi_def_cfa_offset 72
 209:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  61              		.loc 1 209 3 view .LVU4
 209:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  62              		.loc 1 209 22 is_stmt 0 view .LVU5
  63 0004 0023     		movs	r3, #0
  64 0006 0893     		str	r3, [sp, #32]
  65 0008 0993     		str	r3, [sp, #36]
  66 000a 0B93     		str	r3, [sp, #44]
  67 000c 0C93     		str	r3, [sp, #48]
 210:Src/main.c    **** 
  68              		.loc 1 210 3 is_stmt 1 view .LVU6
 210:Src/main.c    **** 
  69              		.loc 1 210 22 is_stmt 0 view .LVU7
  70 000e 0193     		str	r3, [sp, #4]
  71 0010 0293     		str	r3, [sp, #8]
  72 0012 0393     		str	r3, [sp, #12]
  73 0014 0493     		str	r3, [sp, #16]
  74 0016 0593     		str	r3, [sp, #20]
 215:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  75              		.loc 1 215 3 is_stmt 1 view .LVU8
 215:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  76              		.loc 1 215 36 is_stmt 0 view .LVU9
  77 0018 0122     		movs	r2, #1
  78 001a 0692     		str	r2, [sp, #24]
 216:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  79              		.loc 1 216 3 is_stmt 1 view .LVU10
 216:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  80              		.loc 1 216 30 is_stmt 0 view .LVU11
ARM GAS  /tmp/ccNgZlK5.s 			page 7


  81 001c 4FF48033 		mov	r3, #65536
  82 0020 0793     		str	r3, [sp, #28]
 217:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  83              		.loc 1 217 3 is_stmt 1 view .LVU12
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  84              		.loc 1 218 3 view .LVU13
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  85              		.loc 1 218 30 is_stmt 0 view .LVU14
  86 0022 0A92     		str	r2, [sp, #40]
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  87              		.loc 1 219 3 is_stmt 1 view .LVU15
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  88              		.loc 1 219 34 is_stmt 0 view .LVU16
  89 0024 0222     		movs	r2, #2
  90 0026 0D92     		str	r2, [sp, #52]
 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  91              		.loc 1 220 3 is_stmt 1 view .LVU17
 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  92              		.loc 1 220 35 is_stmt 0 view .LVU18
  93 0028 0E93     		str	r3, [sp, #56]
 221:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  94              		.loc 1 221 3 is_stmt 1 view .LVU19
 221:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  95              		.loc 1 221 32 is_stmt 0 view .LVU20
  96 002a 4FF4E013 		mov	r3, #1835008
  97 002e 0F93     		str	r3, [sp, #60]
 222:Src/main.c    ****   {
  98              		.loc 1 222 3 is_stmt 1 view .LVU21
 222:Src/main.c    ****   {
  99              		.loc 1 222 7 is_stmt 0 view .LVU22
 100 0030 06A8     		add	r0, sp, #24
 101 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 102              	.LVL0:
 222:Src/main.c    ****   {
 103              		.loc 1 222 6 view .LVU23
 104 0036 80B9     		cbnz	r0, .L7
 229:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 105              		.loc 1 229 3 is_stmt 1 view .LVU24
 229:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 106              		.loc 1 229 31 is_stmt 0 view .LVU25
 107 0038 0F23     		movs	r3, #15
 108 003a 0193     		str	r3, [sp, #4]
 231:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 109              		.loc 1 231 3 is_stmt 1 view .LVU26
 231:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 110              		.loc 1 231 34 is_stmt 0 view .LVU27
 111 003c 0221     		movs	r1, #2
 112 003e 0291     		str	r1, [sp, #8]
 232:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 113              		.loc 1 232 3 is_stmt 1 view .LVU28
 232:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 114              		.loc 1 232 35 is_stmt 0 view .LVU29
 115 0040 0023     		movs	r3, #0
 116 0042 0393     		str	r3, [sp, #12]
 233:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 117              		.loc 1 233 3 is_stmt 1 view .LVU30
 233:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/ccNgZlK5.s 			page 8


 118              		.loc 1 233 36 is_stmt 0 view .LVU31
 119 0044 4FF48062 		mov	r2, #1024
 120 0048 0492     		str	r2, [sp, #16]
 234:Src/main.c    **** 
 121              		.loc 1 234 3 is_stmt 1 view .LVU32
 234:Src/main.c    **** 
 122              		.loc 1 234 36 is_stmt 0 view .LVU33
 123 004a 0593     		str	r3, [sp, #20]
 236:Src/main.c    ****   {
 124              		.loc 1 236 3 is_stmt 1 view .LVU34
 236:Src/main.c    ****   {
 125              		.loc 1 236 7 is_stmt 0 view .LVU35
 126 004c 01A8     		add	r0, sp, #4
 127 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 128              	.LVL1:
 236:Src/main.c    ****   {
 129              		.loc 1 236 6 view .LVU36
 130 0052 20B9     		cbnz	r0, .L8
 240:Src/main.c    **** 
 131              		.loc 1 240 1 view .LVU37
 132 0054 11B0     		add	sp, sp, #68
 133              	.LCFI2:
 134              		.cfi_remember_state
 135              		.cfi_def_cfa_offset 4
 136              		@ sp needed
 137 0056 5DF804FB 		ldr	pc, [sp], #4
 138              	.L7:
 139              	.LCFI3:
 140              		.cfi_restore_state
 224:Src/main.c    ****   }
 141              		.loc 1 224 5 is_stmt 1 view .LVU38
 142 005a FFF7FEFF 		bl	Error_Handler
 143              	.LVL2:
 144              	.L8:
 238:Src/main.c    ****   }
 145              		.loc 1 238 5 view .LVU39
 146 005e FFF7FEFF 		bl	Error_Handler
 147              	.LVL3:
 148              		.cfi_endproc
 149              	.LFE69:
 151              		.section	.text.main,"ax",%progbits
 152              		.align	1
 153              		.global	main
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu softvfp
 159              	main:
 160              	.LFB68:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 161              		.loc 1 91 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 304
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165 0000 30B5     		push	{r4, r5, lr}
 166              	.LCFI4:
 167              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccNgZlK5.s 			page 9


 168              		.cfi_offset 4, -12
 169              		.cfi_offset 5, -8
 170              		.cfi_offset 14, -4
 171 0002 CDB0     		sub	sp, sp, #308
 172              	.LCFI5:
 173              		.cfi_def_cfa_offset 320
  99:Src/main.c    **** 
 174              		.loc 1 99 3 view .LVU41
 175 0004 FFF7FEFF 		bl	HAL_Init
 176              	.LVL4:
 106:Src/main.c    **** 
 177              		.loc 1 106 3 view .LVU42
 178 0008 FFF7FEFF 		bl	SystemClock_Config
 179              	.LVL5:
 113:Src/main.c    ****   MX_USART2_UART_Init();
 180              		.loc 1 113 3 view .LVU43
 181 000c FFF7FEFF 		bl	MX_GPIO_Init
 182              	.LVL6:
 114:Src/main.c    ****   /* USER CODE BEGIN 2 */
 183              		.loc 1 114 3 view .LVU44
 184 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 185              	.LVL7:
 117:Src/main.c    **** 
 186              		.loc 1 117 3 view .LVU45
 125:Src/main.c    **** 	LCD_SetRotation(1);
 187              		.loc 1 125 2 view .LVU46
 188 0014 FFF7FEFF 		bl	LCD_Init
 189              	.LVL8:
 126:Src/main.c    **** 	LCD_FillScreen(ILI92_WHITE);
 190              		.loc 1 126 2 view .LVU47
 191 0018 0120     		movs	r0, #1
 192 001a FFF7FEFF 		bl	LCD_SetRotation
 193              	.LVL9:
 127:Src/main.c    **** 	LCD_SetTextColor(ILI92_GREEN, ILI92_WHITE);
 194              		.loc 1 127 2 view .LVU48
 195 001e 4FF6FF70 		movw	r0, #65535
 196 0022 FFF7FEFF 		bl	LCD_FillScreen
 197              	.LVL10:
 128:Src/main.c    **** 	LCD_Printf("\n START 'VRGC-056th'\n ");
 198              		.loc 1 128 2 view .LVU49
 199 0026 4FF6FF71 		movw	r1, #65535
 200 002a 4FF4FC60 		mov	r0, #2016
 201 002e FFF7FEFF 		bl	LCD_SetTextColor
 202              	.LVL11:
 129:Src/main.c    **** 	LCD_Printf("for_debug USART2 on PA2 115200/8-N-1 \n");
 203              		.loc 1 129 2 view .LVU50
 204 0032 3E48     		ldr	r0, .L29
 205 0034 FFF7FEFF 		bl	LCD_Printf
 206              	.LVL12:
 130:Src/main.c    **** 
 207              		.loc 1 130 2 view .LVU51
 208 0038 3D48     		ldr	r0, .L29+4
 209 003a FFF7FEFF 		bl	LCD_Printf
 210              	.LVL13:
 132:Src/main.c    **** 	uint32_t flash_word_u32 = Flash_Read(MY_FLASH_PAGE_ADDR);
 211              		.loc 1 132 2 view .LVU52
 212 003e 3D48     		ldr	r0, .L29+8
ARM GAS  /tmp/ccNgZlK5.s 			page 10


 213 0040 FFF7FEFF 		bl	LCD_Printf
 214              	.LVL14:
 133:Src/main.c    **** 	LCD_Printf(" word_u32 = 0x%x; \n", flash_word_u32);
 215              		.loc 1 133 2 view .LVU53
 133:Src/main.c    **** 	LCD_Printf(" word_u32 = 0x%x; \n", flash_word_u32);
 216              		.loc 1 133 28 is_stmt 0 view .LVU54
 217 0044 3C48     		ldr	r0, .L29+12
 218 0046 FFF7FEFF 		bl	Flash_Read
 219              	.LVL15:
 220 004a 0146     		mov	r1, r0
 133:Src/main.c    **** 	LCD_Printf(" word_u32 = 0x%x; \n", flash_word_u32);
 221              		.loc 1 133 11 view .LVU55
 222 004c 4B90     		str	r0, [sp, #300]
 134:Src/main.c    **** 	LCD_Printf(" Rotation: '%s'; \n ", (char *)&flash_word_u32);
 223              		.loc 1 134 2 is_stmt 1 view .LVU56
 224 004e 3B48     		ldr	r0, .L29+16
 225 0050 FFF7FEFF 		bl	LCD_Printf
 226              	.LVL16:
 135:Src/main.c    **** 
 227              		.loc 1 135 2 view .LVU57
 228 0054 4BA9     		add	r1, sp, #300
 229 0056 3A48     		ldr	r0, .L29+20
 230 0058 FFF7FEFF 		bl	LCD_Printf
 231              	.LVL17:
 165:Src/main.c    **** 	{
 232              		.loc 1 165 2 view .LVU58
 233 005c 4B9B     		ldr	r3, [sp, #300]
 234 005e 394A     		ldr	r2, .L29+24
 235 0060 9342     		cmp	r3, r2
 236 0062 08D0     		beq	.L10
 237 0064 02F58232 		add	r2, r2, #66560
 238 0068 0632     		adds	r2, r2, #6
 239 006a 9342     		cmp	r3, r2
 240 006c 09D0     		beq	.L11
 169:Src/main.c    **** 	}
 241              		.loc 1 169 16 view .LVU59
 242 006e 0120     		movs	r0, #1
 243 0070 FFF7FEFF 		bl	LCD_SetRotation
 244              	.LVL18:
 169:Src/main.c    **** 	}
 245              		.loc 1 169 37 view .LVU60
 169:Src/main.c    **** 	}
 246              		.loc 1 169 4 is_stmt 0 view .LVU61
 247 0074 02E0     		b	.L13
 248              	.L10:
 167:Src/main.c    **** 		 case 	STRING_RIGHT:	LCD_SetRotation(1);		break;
 249              		.loc 1 167 23 is_stmt 1 view .LVU62
 250 0076 0320     		movs	r0, #3
 251 0078 FFF7FEFF 		bl	LCD_SetRotation
 252              	.LVL19:
 167:Src/main.c    **** 		 case 	STRING_RIGHT:	LCD_SetRotation(1);		break;
 253              		.loc 1 167 44 view .LVU63
 254              	.L13:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 255              		.loc 1 91 1 is_stmt 0 view .LVU64
 256 007c 0022     		movs	r2, #0
 257              	.LVL20:
ARM GAS  /tmp/ccNgZlK5.s 			page 11


 258              	.L26:
 176:Src/main.c    **** 	for (int i=0; i<8; i++)	{
 259              		.loc 1 176 3 is_stmt 1 view .LVU65
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 260              		.loc 1 177 2 view .LVU66
 261              	.LBB2:
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 262              		.loc 1 177 7 view .LVU67
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 263              		.loc 1 177 11 is_stmt 0 view .LVU68
 264 007e 0024     		movs	r4, #0
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 265              		.loc 1 177 2 view .LVU69
 266 0080 0CE0     		b	.L14
 267              	.LVL21:
 268              	.L11:
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 269              		.loc 1 177 2 view .LVU70
 270              	.LBE2:
 168:Src/main.c    **** 		 default:				LCD_SetRotation(1);		break;
 271              		.loc 1 168 24 is_stmt 1 view .LVU71
 272 0082 0120     		movs	r0, #1
 273 0084 FFF7FEFF 		bl	LCD_SetRotation
 274              	.LVL22:
 168:Src/main.c    **** 		 default:				LCD_SetRotation(1);		break;
 275              		.loc 1 168 45 view .LVU72
 168:Src/main.c    **** 		 default:				LCD_SetRotation(1);		break;
 276              		.loc 1 168 4 is_stmt 0 view .LVU73
 277 0088 F8E7     		b	.L13
 278              	.LVL23:
 279              	.L16:
 280              	.LBB6:
 281              	.LBB3:
 185:Src/main.c    **** 			case  1: LCD_Printf("Monday____;");		break;
 282              		.loc 1 185 13 is_stmt 1 view .LVU74
 283 008a 2F48     		ldr	r0, .L29+28
 284 008c FFF7FEFF 		bl	LCD_Printf
 285              	.LVL24:
 185:Src/main.c    **** 			case  1: LCD_Printf("Monday____;");		break;
 286              		.loc 1 185 41 view .LVU75
 287              	.L24:
 194:Src/main.c    **** 	} // end for i=0
 288              		.loc 1 194 3 discriminator 2 view .LVU76
 289 0090 4FF47A70 		mov	r0, #1000
 290 0094 FFF7FEFF 		bl	HAL_Delay
 291              	.LVL25:
 292              	.LBE3:
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 293              		.loc 1 177 22 is_stmt 0 discriminator 2 view .LVU77
 294 0098 0134     		adds	r4, r4, #1
 295              	.LVL26:
 296              	.LBB4:
 180:Src/main.c    **** 		HAL_UART_Transmit(&huart2, (uint8_t *)DebugStr, strlen(DebugStr), 100);
 297              		.loc 1 180 57 discriminator 2 view .LVU78
 298 009a 2A46     		mov	r2, r5
 299              	.LVL27:
 300              	.L14:
ARM GAS  /tmp/ccNgZlK5.s 			page 12


 180:Src/main.c    **** 		HAL_UART_Transmit(&huart2, (uint8_t *)DebugStr, strlen(DebugStr), 100);
 301              		.loc 1 180 57 discriminator 2 view .LVU79
 302              	.LBE4:
 177:Src/main.c    **** 		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	on board RED-LED on PB0 (CS_pin)
 303              		.loc 1 177 2 discriminator 1 view .LVU80
 304 009c 072C     		cmp	r4, #7
 305 009e EEDC     		bgt	.L26
 306              	.LBB5:
 179:Src/main.c    **** 		sprintf(DebugStr," pointer %04u\r\n", (int)pointer_u32++);
 307              		.loc 1 179 3 is_stmt 1 view .LVU81
 180:Src/main.c    **** 		HAL_UART_Transmit(&huart2, (uint8_t *)DebugStr, strlen(DebugStr), 100);
 308              		.loc 1 180 3 view .LVU82
 180:Src/main.c    **** 		HAL_UART_Transmit(&huart2, (uint8_t *)DebugStr, strlen(DebugStr), 100);
 309              		.loc 1 180 57 is_stmt 0 view .LVU83
 310 00a0 551C     		adds	r5, r2, #1
 311              	.LVL28:
 180:Src/main.c    **** 		HAL_UART_Transmit(&huart2, (uint8_t *)DebugStr, strlen(DebugStr), 100);
 312              		.loc 1 180 3 view .LVU84
 313 00a2 2A49     		ldr	r1, .L29+32
 314 00a4 6846     		mov	r0, sp
 315 00a6 FFF7FEFF 		bl	sprintf
 316              	.LVL29:
 181:Src/main.c    **** 		LCD_SetCursor(100, 100);
 317              		.loc 1 181 3 is_stmt 1 view .LVU85
 181:Src/main.c    **** 		LCD_SetCursor(100, 100);
 318              		.loc 1 181 51 is_stmt 0 view .LVU86
 319 00aa 6846     		mov	r0, sp
 320 00ac FFF7FEFF 		bl	strlen
 321              	.LVL30:
 181:Src/main.c    **** 		LCD_SetCursor(100, 100);
 322              		.loc 1 181 3 view .LVU87
 323 00b0 6423     		movs	r3, #100
 324 00b2 82B2     		uxth	r2, r0
 325 00b4 6946     		mov	r1, sp
 326 00b6 2648     		ldr	r0, .L29+36
 327 00b8 FFF7FEFF 		bl	HAL_UART_Transmit
 328              	.LVL31:
 182:Src/main.c    **** 		LCD_Printf("%d) ",i);
 329              		.loc 1 182 3 is_stmt 1 view .LVU88
 330 00bc 6421     		movs	r1, #100
 331 00be 0846     		mov	r0, r1
 332 00c0 FFF7FEFF 		bl	LCD_SetCursor
 333              	.LVL32:
 183:Src/main.c    **** 		switch(i) {
 334              		.loc 1 183 3 view .LVU89
 335 00c4 2146     		mov	r1, r4
 336 00c6 2348     		ldr	r0, .L29+40
 337 00c8 FFF7FEFF 		bl	LCD_Printf
 338              	.LVL33:
 184:Src/main.c    **** 			case  7: LCD_Printf("Sunday____;"); 	break;
 339              		.loc 1 184 3 view .LVU90
 340 00cc 631E     		subs	r3, r4, #1
 341 00ce 062B     		cmp	r3, #6
 342 00d0 28D8     		bhi	.L15
 343 00d2 01A2     		adr	r2, .L17
 344 00d4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 345              		.p2align 2
ARM GAS  /tmp/ccNgZlK5.s 			page 13


 346              	.L17:
 347 00d8 F5000000 		.word	.L23+1
 348 00dc FD000000 		.word	.L22+1
 349 00e0 05010000 		.word	.L21+1
 350 00e4 0D010000 		.word	.L20+1
 351 00e8 15010000 		.word	.L19+1
 352 00ec 1D010000 		.word	.L18+1
 353 00f0 8B000000 		.word	.L16+1
 354              		.p2align 1
 355              	.L23:
 186:Src/main.c    **** 			case  2: LCD_Printf("Tuesday___;"); 	break;
 356              		.loc 1 186 13 view .LVU91
 357 00f4 1848     		ldr	r0, .L29+44
 358 00f6 FFF7FEFF 		bl	LCD_Printf
 359              	.LVL34:
 186:Src/main.c    **** 			case  2: LCD_Printf("Tuesday___;"); 	break;
 360              		.loc 1 186 41 view .LVU92
 186:Src/main.c    **** 			case  2: LCD_Printf("Tuesday___;"); 	break;
 361              		.loc 1 186 4 is_stmt 0 view .LVU93
 362 00fa C9E7     		b	.L24
 363              	.L22:
 187:Src/main.c    **** 			case  3: LCD_Printf("Wednesday_;");		break;
 364              		.loc 1 187 13 is_stmt 1 view .LVU94
 365 00fc 1748     		ldr	r0, .L29+48
 366 00fe FFF7FEFF 		bl	LCD_Printf
 367              	.LVL35:
 187:Src/main.c    **** 			case  3: LCD_Printf("Wednesday_;");		break;
 368              		.loc 1 187 41 view .LVU95
 187:Src/main.c    **** 			case  3: LCD_Printf("Wednesday_;");		break;
 369              		.loc 1 187 4 is_stmt 0 view .LVU96
 370 0102 C5E7     		b	.L24
 371              	.L21:
 188:Src/main.c    **** 			case  4: LCD_Printf("Thursday__;");		break;
 372              		.loc 1 188 13 is_stmt 1 view .LVU97
 373 0104 1648     		ldr	r0, .L29+52
 374 0106 FFF7FEFF 		bl	LCD_Printf
 375              	.LVL36:
 188:Src/main.c    **** 			case  4: LCD_Printf("Thursday__;");		break;
 376              		.loc 1 188 41 view .LVU98
 188:Src/main.c    **** 			case  4: LCD_Printf("Thursday__;");		break;
 377              		.loc 1 188 4 is_stmt 0 view .LVU99
 378 010a C1E7     		b	.L24
 379              	.L20:
 189:Src/main.c    **** 			case  5: LCD_Printf("Friday____;");		break;
 380              		.loc 1 189 13 is_stmt 1 view .LVU100
 381 010c 1548     		ldr	r0, .L29+56
 382 010e FFF7FEFF 		bl	LCD_Printf
 383              	.LVL37:
 189:Src/main.c    **** 			case  5: LCD_Printf("Friday____;");		break;
 384              		.loc 1 189 41 view .LVU101
 189:Src/main.c    **** 			case  5: LCD_Printf("Friday____;");		break;
 385              		.loc 1 189 4 is_stmt 0 view .LVU102
 386 0112 BDE7     		b	.L24
 387              	.L19:
 190:Src/main.c    **** 			case  6: LCD_Printf("Saturday__;");		break;
 388              		.loc 1 190 13 is_stmt 1 view .LVU103
 389 0114 1448     		ldr	r0, .L29+60
ARM GAS  /tmp/ccNgZlK5.s 			page 14


 390 0116 FFF7FEFF 		bl	LCD_Printf
 391              	.LVL38:
 190:Src/main.c    **** 			case  6: LCD_Printf("Saturday__;");		break;
 392              		.loc 1 190 41 view .LVU104
 190:Src/main.c    **** 			case  6: LCD_Printf("Saturday__;");		break;
 393              		.loc 1 190 4 is_stmt 0 view .LVU105
 394 011a B9E7     		b	.L24
 395              	.L18:
 191:Src/main.c    **** 			default: LCD_Printf("Out_of_day;");		break;
 396              		.loc 1 191 13 is_stmt 1 view .LVU106
 397 011c 1348     		ldr	r0, .L29+64
 398 011e FFF7FEFF 		bl	LCD_Printf
 399              	.LVL39:
 191:Src/main.c    **** 			default: LCD_Printf("Out_of_day;");		break;
 400              		.loc 1 191 41 view .LVU107
 191:Src/main.c    **** 			default: LCD_Printf("Out_of_day;");		break;
 401              		.loc 1 191 4 is_stmt 0 view .LVU108
 402 0122 B5E7     		b	.L24
 403              	.L15:
 192:Src/main.c    **** 		} // end switch
 404              		.loc 1 192 13 is_stmt 1 view .LVU109
 405 0124 1248     		ldr	r0, .L29+68
 406 0126 FFF7FEFF 		bl	LCD_Printf
 407              	.LVL40:
 192:Src/main.c    **** 		} // end switch
 408              		.loc 1 192 41 view .LVU110
 192:Src/main.c    **** 		} // end switch
 409              		.loc 1 192 4 is_stmt 0 view .LVU111
 410 012a B1E7     		b	.L24
 411              	.L30:
 412              		.align	2
 413              	.L29:
 414 012c 00000000 		.word	.LC0
 415 0130 18000000 		.word	.LC1
 416 0134 40000000 		.word	.LC2
 417 0138 00FC0008 		.word	134282240
 418 013c 50000000 		.word	.LC3
 419 0140 64000000 		.word	.LC4
 420 0144 4C656674 		.word	1952867660
 421 0148 90000000 		.word	.LC7
 422 014c 78000000 		.word	.LC5
 423 0150 00000000 		.word	huart2
 424 0154 88000000 		.word	.LC6
 425 0158 9C000000 		.word	.LC8
 426 015c A8000000 		.word	.LC9
 427 0160 B4000000 		.word	.LC10
 428 0164 C0000000 		.word	.LC11
 429 0168 CC000000 		.word	.LC12
 430 016c D8000000 		.word	.LC13
 431 0170 E4000000 		.word	.LC14
 432              	.LBE5:
 433              	.LBE6:
 434              		.cfi_endproc
 435              	.LFE68:
 437              		.section	.text.assert_failed,"ax",%progbits
 438              		.align	1
 439              		.global	assert_failed
ARM GAS  /tmp/ccNgZlK5.s 			page 15


 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu softvfp
 445              	assert_failed:
 446              	.LVL41:
 447              	.LFB71:
 257:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 258:Src/main.c    **** }
 259:Src/main.c    **** 
 260:Src/main.c    **** #ifdef  USE_FULL_ASSERT
 261:Src/main.c    **** /**
 262:Src/main.c    ****   * @brief  Reports the name of the source file and the source line number
 263:Src/main.c    ****   *         where the assert_param error has occurred.
 264:Src/main.c    ****   * @param  file: pointer to the source file name
 265:Src/main.c    ****   * @param  line: assert_param error line source number
 266:Src/main.c    ****   * @retval None
 267:Src/main.c    ****   */
 268:Src/main.c    **** void assert_failed(uint8_t *file, uint32_t line)
 269:Src/main.c    **** {
 448              		.loc 1 269 1 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 270:Src/main.c    ****   /* USER CODE BEGIN 6 */
 271:Src/main.c    ****   /* User can add his own implementation to report the file name and line number,
 272:Src/main.c    ****      tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 273:Src/main.c    ****   /* USER CODE END 6 */
 274:Src/main.c    **** }
 453              		.loc 1 274 1 view .LVU113
 454 0000 7047     		bx	lr
 455              		.cfi_endproc
 456              	.LFE71:
 458              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 459              		.align	2
 460              	.LC0:
 461 0000 0A205354 		.ascii	"\012 START 'VRGC-056th'\012 \000"
 461      41525420 
 461      27565247 
 461      432D3035 
 461      36746827 
 462 0017 00       		.space	1
 463              	.LC1:
 464 0018 666F725F 		.ascii	"for_debug USART2 on PA2 115200/8-N-1 \012\000"
 464      64656275 
 464      67205553 
 464      41525432 
 464      206F6E20 
 465 003f 00       		.space	1
 466              	.LC2:
 467 0040 466C6173 		.ascii	"Flash read.. \012\000"
 467      68207265 
 467      61642E2E 
 467      200A00
 468 004f 00       		.space	1
 469              	.LC3:
ARM GAS  /tmp/ccNgZlK5.s 			page 16


 470 0050 20776F72 		.ascii	" word_u32 = 0x%x; \012\000"
 470      645F7533 
 470      32203D20 
 470      30782578 
 470      3B200A00 
 471              	.LC4:
 472 0064 20526F74 		.ascii	" Rotation: '%s'; \012 \000"
 472      6174696F 
 472      6E3A2027 
 472      2573273B 
 472      200A2000 
 473              	.LC5:
 474 0078 20706F69 		.ascii	" pointer %04u\015\012\000"
 474      6E746572 
 474      20253034 
 474      750D0A00 
 475              	.LC6:
 476 0088 25642920 		.ascii	"%d) \000"
 476      00
 477 008d 000000   		.space	3
 478              	.LC7:
 479 0090 53756E64 		.ascii	"Sunday____;\000"
 479      61795F5F 
 479      5F5F3B00 
 480              	.LC8:
 481 009c 4D6F6E64 		.ascii	"Monday____;\000"
 481      61795F5F 
 481      5F5F3B00 
 482              	.LC9:
 483 00a8 54756573 		.ascii	"Tuesday___;\000"
 483      6461795F 
 483      5F5F3B00 
 484              	.LC10:
 485 00b4 5765646E 		.ascii	"Wednesday_;\000"
 485      65736461 
 485      795F3B00 
 486              	.LC11:
 487 00c0 54687572 		.ascii	"Thursday__;\000"
 487      73646179 
 487      5F5F3B00 
 488              	.LC12:
 489 00cc 46726964 		.ascii	"Friday____;\000"
 489      61795F5F 
 489      5F5F3B00 
 490              	.LC13:
 491 00d8 53617475 		.ascii	"Saturday__;\000"
 491      72646179 
 491      5F5F3B00 
 492              	.LC14:
 493 00e4 4F75745F 		.ascii	"Out_of_day;\000"
 493      6F665F64 
 493      61793B00 
 494              		.text
 495              	.Letext0:
 496              		.file 2 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stdint.h"
 497              		.file 3 "Drivers/CMSIS/Include/core_cm3.h"
 498              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/ccNgZlK5.s 			page 17


 499              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 500              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 501              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 502              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 503              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 504              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 505              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 506              		.file 12 "Inc/usart.h"
 507              		.file 13 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stddef.h"
 508              		.file 14 "/usr/include/newlib/sys/_types.h"
 509              		.file 15 "/usr/include/newlib/sys/reent.h"
 510              		.file 16 "/usr/include/newlib/sys/lock.h"
 511              		.file 17 "/usr/include/newlib/stdlib.h"
 512              		.file 18 "Drivers/display_ILI-93xx_sm/Fonts/fonts.h"
 513              		.file 19 "Drivers/display_ILI-93xx_sm/lcd.h"
 514              		.file 20 "/usr/include/newlib/stdio.h"
 515              		.file 21 "/usr/include/newlib/string.h"
 516              		.file 22 "Inc/gpio.h"
 517              		.file 23 "Drivers/flash_stm32f103_hal_sm/flash_stm32f103_hal_sm.h"
ARM GAS  /tmp/ccNgZlK5.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNgZlK5.s:16     .text.Error_Handler:0000000000000000 $t
     /tmp/ccNgZlK5.s:24     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccNgZlK5.s:41     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNgZlK5.s:48     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNgZlK5.s:152    .text.main:0000000000000000 $t
     /tmp/ccNgZlK5.s:159    .text.main:0000000000000000 main
     /tmp/ccNgZlK5.s:347    .text.main:00000000000000d8 $d
     /tmp/ccNgZlK5.s:354    .text.main:00000000000000f4 $t
     /tmp/ccNgZlK5.s:414    .text.main:000000000000012c $d
     /tmp/ccNgZlK5.s:438    .text.assert_failed:0000000000000000 $t
     /tmp/ccNgZlK5.s:445    .text.assert_failed:0000000000000000 assert_failed
     /tmp/ccNgZlK5.s:459    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
LCD_Init
LCD_SetRotation
LCD_FillScreen
LCD_SetTextColor
LCD_Printf
Flash_Read
HAL_Delay
sprintf
strlen
HAL_UART_Transmit
LCD_SetCursor
huart2
